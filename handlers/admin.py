
import asyncio
import os
from datetime import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext
from bson import ObjectId

from loader import dp, UserStates, AdminStates, messages_collection

from utils.database import users_collection, is_admin, posts_collection, get_user, \
    get_all_ad_posts, get_messages, save_ad_post
from utils.keyboards import get_main_keyboard, get_admin_keyboard



@dp.message_handler(commands=['admin'], state='*')
async def admin_command(message: types.Message):
    if is_admin(message.from_user.id):
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_keyboard())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")


@dp.message_handler(lambda message: message.text == 'üìä –í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É', state='*')
async def export_database(message: types.Message):
    if not is_admin(message.from_user.id): return

    try:
        users = list(users_collection.find())
        users_text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            users_text += f"{user['user_id']}\n"
        filename = f'users_export_{datetime.now().strftime("%Y%m%d_%H%M%S")}.txt'
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(users_text)

        await message.answer_document(open(filename, 'rb'))
        os.remove(filename)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ: {e}")


@dp.message_handler(lambda message: message.text == 'üìà –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', state='*')
async def referral_stats(message: types.Message):
    if not is_admin(message.from_user.id): return

    top_referrers = list(users_collection.find({'referral_count': {'$gt': 0}}).sort('referral_count', -1).limit(10))
    if not top_referrers:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏")
        return

    stats_text = "üèÜ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n\n"
    for i, user in enumerate(top_referrers, 1):
        stats_text += f"{i}. {user.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')} (@{user.get('username', '–Ω–µ—Ç')})\n"
        stats_text += f"   –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user.get('referral_count', 0)}\n"
        stats_text += f"   –°—Å—ã–ª–∫–∞: {user.get('referral_link', '')}\n\n"

    await message.answer(stats_text)


@dp.message_handler(lambda message: message.text == 'üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è', state='*')
async def change_messages(message: types.Message):
    if not is_admin(message.from_user.id): return

    messages = get_messages()
    messages_text = "–¢–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è):\n\n"
    for key, value in messages.items():
        messages_text += f"üîë {key}\nüìù {value[:100]}{'...' if len(value) > 100 else ''}\n\n"

    await message.answer(messages_text)
    await AdminStates.AWAITING_MESSAGE_KEY.set()


@dp.message_handler(state=AdminStates.AWAITING_MESSAGE_KEY)
async def process_message_key(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await UserStates.AWAITING_READY.set()
        return

    key = message.text.strip()
    existing = messages_collection.find_one({'key': key})
    if not existing:
        await UserStates.AWAITING_READY.set()
        await message.answer("–¢–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ—Ç")
        return

    await state.update_data(editing_key=key)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è '{key}':")
    await AdminStates.AWAITING_NEW_MESSAGE_TEXT.set()


@dp.message_handler(state=AdminStates.AWAITING_NEW_MESSAGE_TEXT)
async def process_new_message_text(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id): return

    user_data = await state.get_data()
    key = user_data['editing_key']
    new_text = message.text

    messages_collection.update_one({'key': key}, {'$set': {'text': new_text}})
    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ '{key}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.finish()
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_keyboard())


@dp.message_handler(lambda message: message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç', state='*')
async def add_ad_post(message: types.Message):
    if not is_admin(message.from_user.id): return
    await message.answer("–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç (—Å –∫–Ω–æ–ø–∫–∞–º–∏, –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –∏ —Ç.–¥.):")
    await AdminStates.AWAITING_POST_FORWARD.set()



@dp.message_handler(state=AdminStates.AWAITING_POST_FORWARD, content_types=types.ContentTypes.ANY)
async def receive_forwarded_post(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id): return

    try:
        post_id = save_ad_post(message)
        await message.answer(f"‚úÖ –†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! ID: {post_id}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await state.finish()
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_keyboard())


@dp.message_handler(lambda message: message.text == 'üìã –°–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤', state='*')
async def list_ad_posts(message: types.Message):
    if not is_admin(message.from_user.id): return

    posts = get_all_ad_posts()
    if not posts:
        await message.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
        return

    for i, post in enumerate(posts, 1):
        preview = (post.get('caption') or post.get('text') or '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')[:100]
        info = f"üìå –ü–æ—Å—Ç #{i}\nID: {post['_id']}\n{preview}..."
        await message.answer(info)
        await asyncio.sleep(0.1)  # —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å


@dp.message_handler(lambda message: message.text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç', state='*')
async def delete_ad_post(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id): return

    posts = get_all_ad_posts()
    if not posts:
        await message.answer("–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    posts_text = "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for post in posts:
        preview = (post.get('caption') or post.get('text') or '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')[:50]
        posts_text += f"ID: {post['_id']} ‚Äî {preview}...\n"

    await message.answer(posts_text)
    await AdminStates.AWAITING_POST_SELECTION.set()
    await state.update_data(deleting_post=True)


@dp.message_handler(state=AdminStates.AWAITING_POST_SELECTION)
async def delete_post(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    post_id_str = message.text.strip()

    try:
        post_id = ObjectId(post_id_str)
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–π ObjectId.")
        return

    post = posts_collection.find_one({'_id': post_id})
    if not post:
        await message.answer("‚ùå –ü–æ—Å—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    posts_collection.delete_one({'_id': post_id})

    await message.answer(f"‚úÖ –ü–æ—Å—Ç {post_id_str} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
    await state.finish()
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_keyboard())



@dp.message_handler(lambda message: message.text == 'üîó –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏', state='*')
async def track_links(message: types.Message):
    if not is_admin(message.from_user.id): return

    pipeline = [
        {"$match": {"referrer_id": {"$exists": True, "$ne": None}}},
        {"$group": {
            "_id": "$referrer_id",
            "count": {"$sum": 1},
            "users": {"$push": "$user_id"}
        }}
    ]

    ref_stats = list(users_collection.aggregate(pipeline))
    if not ref_stats:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º")
        return

    text = "üîó –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º:\n\n"
    for stat in ref_stats:
        referrer = get_user(stat['_id'])
        name = f"@{referrer.get('username', 'id' + str(stat['_id']))}" if referrer else f"id{stat['_id']}"
        text += f"üë§ {name}: –ø—Ä–∏–≤–ª–µ–∫ {stat['count']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        text += f"–°—Å—ã–ª–∫–∞: {referrer.get('referral_link', 'N/A') if referrer else 'N/A'}\n\n"

    await message.answer(text)


@dp.message_handler(lambda message: message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', state='*')
async def back_to_main(message: types.Message):
    if is_admin(message.from_user.id):
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard())
